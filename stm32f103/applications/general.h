/**
 ***********************************************************************************************
 * @file          general.h
 * @author        neale
 * @version       v1.0
 * @date          2024-06-26
 * @brief         test.c的头文件，定义了
 * @license       Copyright (c) 2024-2048, 西安兰特水电测控技术有限责任公司
 ***********************************************************************************************
 * @attention 
 * 
 * Modified Records
 * 
 ***********************************************************************************************
*/

#ifndef     __TEST_H__
#define     __TEST_H__



#include "stdint.h"



/*************************************定义常量*********************************************/
#ifndef NUL
#define NUL             0
#endif

#ifndef TRUE
#define TRUE                 1
#endif

#ifndef FALSE
#define FALSE                 0
#endif

#ifndef ON
#define ON                    1
#endif

#ifndef OFF
#define OFF                    0
#endif

//#ifndef SUCCESS
//#define SUCCESS                1
//#endif

#ifndef FAILURE
#define FAILURE                0
#endif

//#ifndef ENABLE
//#define ENABLE                1
//#endif

//#ifndef DISABLE
//#define DISABLE                0
//#endif

#ifndef NULL
#define NULL          ((void *)0)
#endif

#define MAX_FLOAT   (3.402823E38)
#define MIN_FLOAT   (-3.402823E38)

enum DT{
    DT_INT8 =0,                   //
    DT_UINT8,
    DT_INT16,                   //数据类型为16位整形
    DT_INT32,                   //数据类型为32位整形
    DT_UINT16,                  //数据类型为16位无符号整形
    DT_UINT32,                  //数据类型为32位无符号整形
    DT_FT32,                    //数据类型单精度浮点数
    DT_FT64,                    //双精度浮点数
};

/***************************定义任务类型*******************************************/
/**
 **********************************************************************
 * @brief      定义任务类型的枚举型变量
 **********************************************************************
 */
enum task_type
{
    WRITE_AIM = 0x01,            /**< 设置目标值，根据目标值做相应的动作 */
    READ_DATA = 0x02,           /**< 读取数据 */
    READ_STATUS = 0x03,         /**< 读取状态 */
    READ_PARA = 0x04,           /**< 读取参数 */
    WRITE_CMD = 0x05,           /**< 设置命令 */
    WRITE_PARA = 0x06,          /**< 设置参数 */
    WRITE_RUNPARA = 0x07,       /**< 设置运行参数 */
};


/***************************定义数据存储相关格式*******************************************/

#define     MAX_SEN         16

/*定义渗压计传感器数据格式*/
typedef struct{
    float frequency;                /**< 频率 */
    float temperature;              /**< 温度 */
}MSR_FRE;

/*定义差阻传感器数据格式*/    
typedef struct{
    float R;                        /**< 电阻 */
    float R_ratio;                  /**< 电阻比 */
}MSR_RESISTANCE;

/*定义其它传感器数据格式*/
typedef struct{
    float value;                    /**< 值 */
    uint16_t startaddress;          /**< 起始地址 */
}MSR_OTHER;

/*定义环境量数据格式*/
typedef struct{
    float temperature;              /**< 温度 */
    float humidity;                 /**< 湿度 */
    float voltage;                  /**< 电压 */
}MSR_ENVIRONMENT;

/*定义数据地址角色格式*/
typedef struct{
    uint16_t startaddress;               /**< 地址 */
    uint8_t role;                        /**< 角色 */
}ADDR_ROLE;



/****************定义参数存储相关格式******************************************************/

/*定义物理量表数据格式*/
typedef struct{
    uint16_t    startaddress;           /**< 起始地址 */
    uint8_t     data_type;              /**< 数据类型 */
    uint8_t     data_len;               /**< 数据长度 */
}PHYSICS;

/*定义通道配置表数据格式*/
typedef struct{
    uint16_t    startaddress;           /**< 起始地址 */
    uint16_t    obj_num;                /**< 对象编码 */
    uint8_t     role;                   /**< 角色 */
}TUN_CONFIG;

/*定义参数物理量关系表数据格式*/
typedef struct{
    uint16_t    startaddress;           /**< 起始地址 */
    uint8_t     para_code;              /**< 参数编码 */
    uint8_t     phy_code;               /**< 物理量编码 */
}PHY_REL_PARA;

/*定义物理量监测项目表数据格式*/
typedef struct{
    uint16_t    startaddress;           /**< 起始地址 */
    uint16_t    monitor_code;           /**< 监测项目编码 */
    uint8_t     phy_code;               /**< 物理量编码 */
}PHY_MONITOR;

/*定义参数表数据格式*/
typedef struct{
    uint16_t    startaddress;           /**< 起始地址 */
    uint8_t     role;                   /**< 角色 */
    uint8_t     para_val;               /**< 参数值 */
}PARA;


#ifndef KVDB_NUM
#define KVDB_NUM  10
#endif

#ifndef CMD_MAX
#define CMD_MAX  96
#endif




/**
 * @brief      define the cmd para
 */
/**********命令参数表结构体类型**********/
typedef struct {
    uint8_t bitnum;                     //位号
    uint8_t role;                       //角色
    uint8_t modeltype;                  //模块类型
    uint8_t exe_type;                   //操作类型
    uint8_t exe_slave;                  //操作从站地址
    uint8_t exe_cmd;                    //操作功能码
    uint16_t startAddress;              //起始地址
    uint16_t exe_gap;                   //操作间隔
}cmd_para;
typedef cmd_para *cmd_para_t;

/**
 **********************************************************************
 * @brief      命令表操作类型
 **********************************************************************
 */
enum ins_type
{
    INS_NULL        = 0 ,               /**< 无操作 */
    INS_CMD         = 1 ,               /**< 只发命令 */
    INS_CMD_READ    = 2 ,               /**< 发命令，间隔时间后读取数据 */
    INS_READ        = 3 ,               /**< 只读取数据 */
    INS_ATUO_REPORT = 4 ,               /**< 自动上报数据 */
};
enum DB_PART
{
    DB_KV1      = 1 ,               /**< 键值数据库1 */
    DB_KV2      = 2 ,               /**< 键值数据库2 */
    DB_KV3      = 3 ,               /**< 键值数据库3 */
    DB_KV4      = 4 ,               /**< 键值数据库4 */
    DB_TS1      = 5 ,               /**< 时序数据库1 */
    DB_TS2      = 6 ,               /**< 时序数据库2 */
    DB_TS3      = 7 ,               /**< 时序数据库3 */
};

/*****************************************************************************************
*                      *globalTables表结构
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |                   | 表ID    | 起始地址 |  结束地址 |数据分区|最大条数|字节数|     说明        |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[0]  |   01    |    0001  |    0063   | DB_TS1 |        | 128  |频率模数温度表   |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[0]  |   02    |    0065  |    0127   | DB_TS1 |        | 128  |电阻电阻比表     |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[0]  |   03    |    0129  |    0159   | DB_TS1 |        |  64  |标准电流表       |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[0]  |   04    |    0161  |    0389   | DB_TS1 |        |  64  |数据表           |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[1]  |   05    |    0391  |    0395   | DB_TS2 |        |  12  |环境量表         |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[2]  |   06    |    0397  |    0397   | DB_TS3 |        |   4  |雨量表           |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[3]  |   07    |    0401  |    0500   |        |   100  |   4  |设备状态表       |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[4]  |   08    |    0501  |    0600   |        |   100  |   4  |运行参数表       |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[5]  |   09    |    0601  |    1200   | DB_KV3 |   300  |   6  |参数表           |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[6]  |   10    |    1201  |    1300   | DB_KV1 |   100  |   4  |物理量表         |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[7]  |   11    |    1301  |    1500   | DB_KV1 |   16   |   6  |通道配置表       |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[8]  |   12    |    1501  |    2100   | DB_KV2 |   300  |   6  |参数物理量关系表 |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
*   |  globalTables[9]  |   13    |    2101  |    2300   | DB_KV2 |   100  |   6  |项目物理量关系表 |
*   ―――――――――――――――――――――――――――――――――――――――――――――――――
******************************************************************************************/

extern uint8_t command_value[12];                 /**< 定义命令值表，每一位代表一个命令 */ 

/*****************************************************************************************
*   @attention          命令值表说明
*   位号  起始地址        数组中位置               位号  起始地址        数组中位置
*   第0位，00001，command_value[0] & 0x01         第08位，00009，command_value[1] & 0x01    
*   第1位，00002，command_value[0] & 0x02         第09位，00010，command_value[1] & 0x02    
*   第2位，00003，command_value[0] & 0x04         第10位，00011，command_value[1] & 0x04    
*   第3位，00004，command_value[0] & 0x08         第11位，00012，command_value[1] & 0x08    
*   第4位，00005，command_value[0] & 0x10         第12位，00013，command_value[1] & 0x10    
*   第5位，00006，command_value[0] & 0x20         第13位，00014，command_value[1] & 0x20    
*   第6位，00007，command_value[0] & 0x40         第14位，00015，command_value[1] & 0x40    
*   第7位，00008，command_value[0] & 0x80         第15位，00016，command_value[1] & 0x80    
******************************************************************************************/

extern cmd_para cmd_para_tbl[CMD_MAX];                 /**< 建立命令参数表 */

/**
******************************************************************************************
 * @attention
 * 
*   ――――――――――――――――――――――――――――――――――――――――――――――――――――――
*   |          ID       | 位号 | 角色 |模块类型|操作类型|从站地址|功能码|起始地址|等待时间|        说明        |
*   ――――――――――――――――――――――――――――――――――――――――――――――――――――――
*   |  cmd_para_tbl[0]  |  01  |  01  |   4    |   01   |   03   | 0x05 | 0001   |   10   |      测量命令1     |
*   ――――――――――――――――――――――――――――――――――――――――――――――――――――――
******************************************************************************************
*/











#endif

